//
//  WordsSelectionInteractor.swift
//  WordsLearning
//
//  Created by Roman Kuzin on 15/03/2023.
//  Copyright ¬© 2023 Roman Kuzin. All rights reserved.
//

/// –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
protocol WordsListStorageServiceProtocol {

	/// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞
	/// - Parameter complition: –∑–∞–º—ã–∫–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
	func loadWords(complition: @escaping ([Word]) -> ())

	/// –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
	/// - Parameter newWordsList: –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
	func create(_ newWordsList: WordsList)

	/// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤
	func loadWordsLists() -> [WordsList]

	/// –û–±–Ω–æ–≤–∏–¥—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
	/// - Parameters:
	///   - origWordsList: —Å–ø–∏—Å–æ–∫
	///   - newName: –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
	///   - newComment: –Ω–æ–≤—ã–π –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π
	///   - newWords: –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
	func update(origWordsList: WordsList, newName: String, newComment: String?, newWords: [Word])

	/// –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
	/// - Parameter name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
	func deleteWordsList(name: String)
}

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–æ—Ä–∞ —Å—Ü–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
protocol WordsListsSelectionInteractorProtocol {
	
	/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	func viewDidLoad()

	/// –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
	func createButtonTapped()

	/// –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
	func cancelButtonTapped()

	/// –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∞
	func clearButtonTapped()
}

/// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
final class WordsListsSelectionInteractor: WordsListsSelectionInteractorProtocol,
										   SelectWordsListsTableCellOutput {

	/// –ü—Ä–µ–∑–µ–Ω—Ç–µ—Ä —Å—Ü–µ–Ω—ã
	var presenter: WordsListsSelectionPresenterProtocol?

	private let router: MainRouterProtocol
	private let storageService: WordsListStorageServiceProtocol

	private var wordsLists: [WordsList] = []
	private var selectedList: WordsList?
	private let actionOnClose: (WordsList?) -> Void

	/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
	/// - Parameters:
	///   - router: —Ä–æ—É—Ç–µ—Ä
	///   - storageService: —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	///   - currentWordsList: —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
	///   - actionOnClose: –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞
	init(router: MainRouterProtocol,
		 storageService: WordsListStorageServiceProtocol,
		 currentWordsList: WordsList?,
		 actionOnClose: @escaping (WordsList?) -> Void) {
		self.storageService = storageService
		self.actionOnClose = actionOnClose
		self.selectedList = currentWordsList
		self.router = router
	}

	func viewDidLoad() {
		fillUIWithDataFromStorage()
	}

	func createButtonTapped() {
		let actionOnClose: (Bool) -> Void = { [weak self] isChanged in
			guard isChanged else { return }
			self?.fillUIWithDataFromStorage()
		}

		let wordsSelection = WordsSelectionAssembler().create(storageService: storageService,
															  editingList: nil,
															  actionOnClose: actionOnClose)
		router.routeModallyTo(wordsSelection)
	}

	func clearButtonTapped() {
		selectedList = nil
		actionOnClose(nil)
		presenter?.closeScene()
	}

	func cancelButtonTapped() {
		presenter?.closeScene()
	}

	// MARK: - SelectWordsListsTableCellOutput

	func cellTappedWith(listName: String) {
		selectedList = wordsLists.first() { $0.name == listName}
		closeSceneReturningSelectedList()
	}

	func cellSelectedToBeRemoved(withWordsListName name: String, completion: @escaping (Bool) -> Void) {
		presenter?.presentListDeletionConfirmation(withName: name) { [weak self] isConfirmed in
			self?.deleteWordsList(name: name)
			completion(isConfirmed)
		}
	}

	func cellSelectedToBeEdited(withWordsListName name: String) {
		let actionOnClose: (Bool) -> Void = { [weak self] isChanged in
			guard isChanged else { return }
			self?.fillUIWithDataFromStorage()
		}

		let listForEdition = storageService.loadWordsLists().first() { $0.name == name }
		let wordsSelection = WordsSelectionAssembler().create(storageService: storageService,
															  editingList: listForEdition,
															  actionOnClose: actionOnClose)
		router.routeModallyTo(wordsSelection)
	}

	// MARK: - Private

	private func fillUIWithDataFromStorage() {
		wordsLists = storageService.loadWordsLists()
		updateUI(with: wordsLists)
	}

	private func closeSceneReturningSelectedList() {
		actionOnClose(selectedList)
		presenter?.closeScene()
	}

	private func deleteWordsList(name: String) {
		storageService.deleteWordsList(name: name)
		wordsLists.removeAll() { $0.name == name }
		presenter?.updateTitleText(to: wordsLists.isEmpty ? "–ï—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ üôÉ" : "–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å–ø–∏—Å–æ–∫ üòÉ")
	}

	private func updateUI(with lists: [WordsList]) {
		var items: [DRTableViewCellProtocol] = []
		let listsForUI = lists.sorted { $0.name < $1.name }
		listsForUI.forEach {
			items.append(SelectWordsListsTableCell(name: $0.name,
												   comment: $0.commentString,
												   wordsCount: $0.words.count,
												   isSelected: $0.name == selectedList?.name,
												   output: self))
		}
		let title = listsForUI.isEmpty ? "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ üôÉ" :
										 "–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å–ø–∏—Å–æ–∫ üòÉ"
		presenter?.present(items, title: title)
	}
}
